module chip8emu.memory;

/*
	CHIP-8 memory is 4096 bytes long.
	First 512 bytes were used by the interpreter.
	Most CHIP-8 programs start at 0x200 byte.
*/

const ubyte[80] chip8_fontset =
[
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80  // F
];

class Memory {

	ubyte[4096] memory;

	ref ubyte opIndex(ushort address) {
		assert(address >= 0 && address < 4096, "Tried to access invalid memory address.");

		return memory[address];
	}

	void clearAndSetProgram(ubyte[] program) {
		clear();
		memory[0x200 .. 0x200 + program.length] = program;
	}

	void clear() {
		memory[0 .. $] = 0;

		memory[0 .. chip8_fontset.length] = chip8_fontset[0 .. $];		
	}
}